rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection - users can only read/write their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Sessions subcollection - users can only read/write their own sessions
      match /sessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Groups collection - users can read groups they're members of
    match /groups/{groupId} {
      allow read: if request.auth != null &&
                     request.auth.uid in resource.data.memberIds;
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.memberIds;
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.ownerId;
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.ownerId;
    }

    // Group transactions - users can read/write transactions in groups they're members of
    match /groupTransactions/{transactionId} {
      allow read: if request.auth != null &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
      allow create: if request.auth != null &&
                       request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.memberIds &&
                       request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.createdBy;
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.createdBy;
    }
  }
}
