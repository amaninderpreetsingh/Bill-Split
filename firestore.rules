rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Collaborative sessions: anyone can read/write
    // This allows anonymous users to participate
    match /collaborativeSessions/{sessionId} {
      allow read, write: if true;
    }

    // User's private data: only owner can access
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // User's private sessions
      match /sessions/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }

      // User's session history
      match /sessionHistory/{sessionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Groups collection - users can read groups they own or are members of
    match /groups/{groupId} {
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.ownerId ||
                      request.auth.uid in resource.data.memberIds ||
                      request.auth.token.email in resource.data.pendingInvites);
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.ownerId &&
                       request.auth.uid in request.resource.data.memberIds;
      allow update: if request.auth != null &&
                       (request.auth.uid == resource.data.ownerId ||
                        // Allow members to update memberIds and pendingInvites (for auto-accept)
                        (request.auth.uid in resource.data.memberIds &&
                         onlyUpdating(['memberIds', 'pendingInvites', 'updatedAt'])) ||
                        // Allow invited users to accept their own invitation
                        (request.auth.token.email in resource.data.pendingInvites &&
                         onlyUpdating(['memberIds', 'pendingInvites', 'updatedAt'])));
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.ownerId;
    }

    // Helper function to check if only specific fields are being updated
    function onlyUpdating(allowedFields) {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields);
    }

    // Group transactions - users can read/write transactions in groups they're members of
    match /groupTransactions/{transactionId} {
      allow read: if request.auth != null &&
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
      allow create: if request.auth != null &&
                       request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.memberIds &&
                       request.auth.uid == request.resource.data.createdBy;
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.createdBy;
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.createdBy;
    }

    // Receipt analysis cache (if you re-add the cache feature later)
    match /receiptAnalysisCache/{document=**} {
      allow read, write: if true;
    }

    // Group invitations - users can read their own invitations
    match /groupInvitations/{invitationId} {
      allow read: if request.auth != null &&
                     (request.auth.token.email == resource.data.email ||
                      request.auth.uid == resource.data.invitedBy);
      allow write: if request.auth != null &&
                      request.auth.uid == resource.data.invitedBy;
      allow update: if request.auth != null &&
                       request.auth.token.email == resource.data.email;
    }
  }
}
